generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Business {
  legalEntity_id           String                     @id @db.VarChar
  profileName              String?                    @db.VarChar
  tagline                  String?                    @db.VarChar
  summary                  String?
  longSummary              String?
  categories               String?
  profilePictureURL        String?                    @db.VarChar
  headerPictureURL         String?                    @db.VarChar
  headerVideoURL           String?                    @db.VarChar
  email                    String?                    @db.VarChar
  phoneNumber              String?                    @db.VarChar
  LegalEntity              LegalEntity                @relation(fields: [legalEntity_id], references: [id], onDelete: Cascade)
  BusinessAdmin            BusinessAdmin[]
  BusinessInvestmentRounds BusinessInvestmentRounds[]
  BusinessNews             BusinessNews[]
  BusinessRole             BusinessRole[]
  Investment               Investment[]
}

model BusinessAdmin {
  business_id String                       @db.VarChar
  user_id     String                       @db.VarChar
  permissions inv_businessadmin_permission
  id          Int                          @id @default(autoincrement())
  Business    Business                     @relation(fields: [business_id], references: [legalEntity_id], onDelete: Cascade)
  User        User                         @relation(fields: [user_id], references: [legalEntity_id], onDelete: Cascade)
}

model BusinessInvestmentRounds {
  id             String    @id @db.VarChar
  business_id    String    @db.VarChar
  description    String?
  goal           Decimal?  @db.Decimal
  creationDate   DateTime? @default(now()) @db.Timestamp(6)
  completionDate DateTime? @default(now()) @db.Timestamp(6)
  achieved       Boolean?  @default(false)
  type           String?   @db.VarChar
  Business       Business  @relation(fields: [business_id], references: [legalEntity_id], onDelete: Cascade)
}

model BusinessNews {
  id          Int       @id @default(autoincrement())
  business_id String    @db.VarChar
  date        DateTime? @default(now()) @db.Timestamp(6)
  title       String    @db.VarChar
  content     String
  pictureURL  String?   @db.VarChar
  readingTime Decimal   @db.Decimal
  visitCount  Decimal?  @db.Decimal
  Business    Business  @relation(fields: [business_id], references: [legalEntity_id], onDelete: Cascade)
}

model BusinessRole {
  business_id String   @db.VarChar
  user_id     String   @db.VarChar
  role        String   @db.VarChar
  description String
  id          Int      @id @default(autoincrement())
  Business    Business @relation(fields: [business_id], references: [legalEntity_id], onDelete: Cascade)
  User        User     @relation(fields: [user_id], references: [legalEntity_id], onDelete: Cascade)
}

model Investment {
  investor_id String   @db.VarChar
  business_id String   @db.VarChar
  date        DateTime @default(now()) @db.Timestamp(6)
  value       Float    @default(0)
  valueUSD    Float    @default(0)
  currency    String   @default("COP") @db.VarChar
  id          Int      @id @default(autoincrement())
  Business    Business @relation(fields: [business_id], references: [legalEntity_id], onDelete: Cascade)
  User        User     @relation(fields: [investor_id], references: [legalEntity_id], onDelete: Cascade)
}

model LegalEntity {
  id                String                @id @db.VarChar
  type              inv_legalentity_type?
  nationality       String?               @db.VarChar(3)
  registrationDate  DateTime?             @default(now()) @db.Timestamp(6)
  addressCountry    String?               @db.VarChar(3)
  addressRegion     String?               @db.VarChar
  addressLocality   String?               @db.VarChar
  addressPostalCode String?               @db.VarChar
  addressText       String?               @db.VarChar
  birthdate         DateTime?             @default(now()) @db.Timestamp(6)
  personFirstName   String?               @default("") @db.VarChar
  personFamilyName  String?               @db.VarChar
  businessName      String?               @db.VarChar
  businessType      String?               @db.VarChar
  completeData      Boolean?              @default(true)
  Business          Business?
  User              User?
}

model User {
  legalEntity_id    String              @id @db.VarChar
  profileName       String?             @db.VarChar
  profilePictureURL String?             @db.VarChar
  headerPictureURL  String?             @db.VarChar
  biography         String?
  email             String?             @unique(map: "User_email") @db.VarChar
  phoneNumber       String?             @db.VarChar
  password          String              @db.VarChar
  verified_email    Boolean?            @default(false)
  username          String?             @unique(map: "User_username") @db.VarChar
  LegalEntity       LegalEntity         @relation(fields: [legalEntity_id], references: [id], onDelete: Cascade)
  BusinessAdmin     BusinessAdmin[]
  BusinessRole      BusinessRole[]
  Investment        Investment[]
  UserSocialProfile UserSocialProfile[]
}

model UserSocialProfile {
  user_id  String? @db.VarChar
  provider String? @db.VarChar
  username String? @db.VarChar
  url      String? @db.VarChar
  id       Int     @id @default(autoincrement())
  User     User?   @relation(fields: [user_id], references: [legalEntity_id], onDelete: Cascade)
}

enum inv_businessadmin_permission {
  Owner
  Editor
}

enum inv_legalentity_type {
  Person
  Business
}
